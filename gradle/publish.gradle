apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

apply from: project.rootProject.file('gradle/pom.gradle')

task emptyJar(type: Jar) {
}

task stubJavadoc(type: Jar) {
    classifier 'javadoc'
}

task stubDokka(type: Jar) {
    classifier 'kdoc'
}

def selectArtifactId(project, type, defaultName) {
    def name = project.name
    def isCommon = project.ext.has("commonStructure")
    def commonIsRoot = project.ext.has("commonStructure") && project.ext.commonStructure
    def hasNative = project.ext.has("hasNative") && project.ext.hasNative

    switch (type) {
        case 'metadata':
            if (!isCommon) return "$name-$type"
            return commonIsRoot ? "$name" : "$name-common"
            break
        case 'kotlinMultiplatform':
            if (!hasNative) return defaultName
            return isCommon ? "$name-native" : "$name"
            break
        case 'jvm':
            return commonIsRoot ? "$name-jvm" : "$name"
            break
        default:
            return isCommon || hasNative ? defaultName : "$name"
            break
    }
}

publishing {
    repositories {
        maven {
            if (publishLocal) {
                url globalM2
            } else {
                url 'https://dl.bintray.com/e5l/ktor'
            }
        }
        maven { name = "testLocal"; url = "$rootProject.buildDir/m2" }
    }
    publications.all {
        pom.withXml(configureMavenCentralMetadata)

        def type = it.name
        def id = selectArtifactId(project, type, it.artifactId)
        it.artifactId = id
        if (id.endsWith('native')) {
            it.artifact stubJavadoc
            it.artifact stubDokka
            it.artifact emptyJar
        }

        pom.withXml { pom ->
            def dependenciesNode = asNode().getAt("dependencies")[0]
            if (dependenciesNode != null) {
                dependenciesNode.dependency.each {
                    it.artifactId.each { node ->
                        def artifactId = node.text()
                        if (!artifactId.startsWith("ktor") || !artifactId.endsWith("native")) return

                        switch (type) {
                            case 'metadata':
                                if (artifactId.startsWith("ktor-http-cio")) {
                                    node.setValue("${artifactId[0..-8]}-common")
                                } else {
                                    node.setValue("${artifactId[0..-8]}")
                                }
                                break
                            case 'jvm':
                                if (artifactId.startsWith("ktor-http-cio")) {
                                    node.setValue("${artifactId[0..-8]}")
                                } else {
                                    node.setValue("${artifactId[0..-8]}-jvm")
                                }
                                break
                            case 'js':
                                node.setValue("${artifactId[0..-8]}-$type")
                                break
                        }
                    }
                }
            }
        }
    }

    kotlin.targets.all { target ->
        def publication = publishing.publications.findByName(target.name)

        if (publication != null) {
            if (target.platformType.name == 'jvm') {
                publication.artifact javadocJar
                publication.artifact dokkaJar
            } else {
                publication.artifact stubJavadoc
                publication.artifact stubDokka
            }

            if (target.platformType.name != 'native') {
                publication.moduleDescriptorGenerator = null
            } else {
                publication.artifact emptyJar
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publish = true
    override = true

    pkg {
        userOrg = 'e5l'
        repo = 'ktor'
        name = 'ktor'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/ktorio/ktor'

        version {
            name = project.version
            released = new Date()
            vcsTag = project.version
        }
    }
}

// TODO :kludge this is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal

// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll { !it.name.contains('-test') }.collect {
        println("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        it
    }
}
